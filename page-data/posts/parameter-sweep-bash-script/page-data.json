{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/parameter-sweep-bash-script/","webpackCompilationHash":"a024c497a79bf33ede42","result":{"data":{"markdownRemark":{"id":"55585cb7-bb32-5669-8e24-188755fa90d3","html":"<p>In my polymer simulation research, often my studies involve running a bunch\nof simulations where I pick one or more input parameters and change them over\na range of values, then compare the results of each separate simulation to\nsee how that/those variable(s) affect the system I’m simulating. This kind of\nstudy is called a “parameter sweep”, and can also be referred to as\n“embarrassingly parallel”, because the processor(s) for each for each\nindividual job don’t need to communicate with the processor(s) from any other\njob. It can be very tedious to manually create input files for each job, so I\nwrote a bash script to help me out.</p>\n<p>For example, if I want to simulate 3 different polymer nanocomposite systems,\neach with a different nanorod length, I could manually create 3 directories\nlike so:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">mkdir</span> length1\n<span class=\"token function\">mkdir</span> length2\n<span class=\"token function\">mkdir</span> length3</code></pre></div>\n<p>Then I could copy an input file, <code class=\"language-text\">bcp.input</code>, and a submit file, <code class=\"language-text\">sub.sh</code> into\neach of those folders like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">d</span> <span class=\"token keyword\">in</span> length*/ <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token function\">cp</span> bcp.input <span class=\"token string\">\"<span class=\"token variable\">$d</span>\"</span>\n    <span class=\"token function\">cp</span> sub.sh <span class=\"token string\">\"<span class=\"token variable\">$d</span>\"</span> \n<span class=\"token keyword\">done</span></code></pre></div>\n<p>Then I could proceed to manually edit all 6 files (or just 3 if the\nsubmission script doesn’t have to change). If it’s just 3 files, it’s not too\nbad, but if I want to run 10 or 20 simulations with slight changes in the\ninput file for each one, manual editing gets real tedious real fast. I got\nfed up with it and wrote a script to do all the editing for me. The script is\ncalled <code class=\"language-text\">param-sweep.sh</code>. Feel free to look at it on\n<a href=\"https://bitbucket.org/benlindsay/param-sweep\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bitbucket</a></p>\n<p>Before running the script, I make a template for the input file and\nsubmission script with parameter names that the script will replace with\nparameter values. My input file template could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">1000</span>        <span class=\"token comment\"># Number of iterations</span>\n<span class=\"token number\">60</span>          <span class=\"token comment\"># Polymer length</span>\n<span class=\"token number\">1</span>           <span class=\"token comment\"># Nanorod radius</span>\nNRLENGTH    <span class=\"token comment\"># Nanorod length</span></code></pre></div>\n<p>and my submission script template could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token comment\">#PBS -N TRIALNAME</span>\n<span class=\"token comment\">#PBS -l nodes=1:ppn=12</span>\n<span class=\"token comment\">#PBS -l walltime=01:00:00,mem=2gb</span>\n\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$PBS_O_WORKDIR</span>\n\n<span class=\"token comment\"># Run code that looks for bcp.input in the current directory</span>\nmpirun <span class=\"token environment constant\">$HOME</span>/code/awesome_code.exe</code></pre></div>\n<p>In this example, I want to replace <code class=\"language-text\">NRLENGTH</code> with the actual nanorod length\nfor each <code class=\"language-text\">bcp.input</code> file in <code class=\"language-text\">./length1</code>, <code class=\"language-text\">./length2</code>, and <code class=\"language-text\">./length3</code>, and I\nwant to replace <code class=\"language-text\">TRIALNAME</code> with a name corresponding to each simulation in\neach <code class=\"language-text\">sub.sh</code> file. The script does this by looking through a <code class=\"language-text\">trials.txt</code>\nfile I make that would look like this in this case:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name        i:NRLENGTH  s:TRIALNAME\nlength1     4           length1-trial\nlength2     5           length2-trial\nlength3     6           length3-trial</code></pre></div>\n<p>The <code class=\"language-text\">i:</code> and <code class=\"language-text\">s:</code> before <code class=\"language-text\">NRLENGTH</code> and <code class=\"language-text\">TRIALNAME</code>, respectively, tell the\nscript to look in the input file or submission script for each variable.\nFinally, let’s look at how to use the script:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">ls</span>\nbcp.input   trials.txt  sub.sh\n$ ~/scripts/param-sweep.sh -t trials.txt -i bcp.input -s sub.sh\nTrials file:        trials.txt\nInput file:         bcp.input\nSubmission script:  sub.sh\n<span class=\"token number\">3</span> trials\n<span class=\"token number\">2</span> vars\nSubmitting trial length1:\n<span class=\"token number\">1443364</span>.rrlogin.internal\nSubmitting trial length2:\n<span class=\"token number\">1443365</span>.rrlogin.internal\nSubmitting trial length3:\n<span class=\"token number\">1443366</span>.rrlogin.internal\n$ tree\n<span class=\"token builtin class-name\">.</span>\n├── bcp.input\n├── length1\n│   ├── bcp.input\n│   └── sub.sh\n├── length2\n│   ├── bcp.input\n│   └── sub.sh\n├── length3\n│   ├── bcp.input\n│   └── sub.sh\n├── sub.sh\n└── trials.txt</code></pre></div>\n<p>So the script made directories for all three simulations, replaced <code class=\"language-text\">NRLENGTH</code>\nwith <code class=\"language-text\">4</code>, <code class=\"language-text\">5</code>, and <code class=\"language-text\">6</code> in the <code class=\"language-text\">bcp.input</code> files, replaced <code class=\"language-text\">TRIALNAME</code> with\n<code class=\"language-text\">length1-trial</code>, <code class=\"language-text\">length2-trial</code>, and <code class=\"language-text\">length3-trial</code> in the <code class=\"language-text\">sub.sh</code> files,\nand submitted the <code class=\"language-text\">sub.sh</code> files from within their respective simulation\ndirectories. In this case, since my script expects files with the names I\nused, I could have just typed <code class=\"language-text\">~/scripts/param-sweep.sh</code>. If I wanted to be\nable to check the files before submitting, I could have typed\n<code class=\"language-text\">~/scripts/param-sweep.sh -n</code> which would create the directories and files\nwithout submitting the jobs.</p>\n<p>A few caveats: the script isn’t currently set up to handle more than one\nlayer of simulation directories. Also, the script as it’s set up right now\ncopies whatever input file and submission script its fed to files named\n<code class=\"language-text\">bcp.input</code> and <code class=\"language-text\">sub.sh</code>. Finally, you’ll need to make sure that the variable\nname you want the script to find and replace with variable values doesn’t\nshow up anywhere else in the file. The script will find and replace all\ninstances of the variable name (case sensitive).</p>\n<p>This script has saved me a lot of time. Hopefully it can help someone else\nout there too.</p>","fields":{"slug":"/posts/parameter-sweep-bash-script/","tagSlugs":["/tag/bash/","/tag/productivity/"]},"frontmatter":{"date":"2015-12-19","description":"In my polymer field theory research, often my studies involve running a bunch of simulations where I pick one or more input parameters and change them over a range of values, then compare the results of each separate simulation to see how that/those variable(s) affect the system I’m simulating. It can be very tedious to manually create input files for each job, so I wrote a bash script to help me out.","tags":["bash","productivity"],"title":"Parameter Sweep Bash Script"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/parameter-sweep-bash-script/"}}}