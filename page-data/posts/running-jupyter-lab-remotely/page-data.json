{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/running-jupyter-lab-remotely","webpackCompilationHash":"ebe0b1b9ba4c5210a248","result":{"data":{"markdownRemark":{"id":"9f54381e-72ec-57d4-add1-9970187ac745","html":"<p><em><strong>Updated Sept. 19, 2019:</strong> Added separate instructions for running on a compute\nnode</em></p>\n<p>I’m a huge fan of <a href=\"http://jupyter.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jupyter Notebooks</a>, and I was very\nexcited when I found out about Jupyter Lab, which provides a much more\ncomprehensive user experience around Jupyter Notebooks.\n<a href=\"https://towardsdatascience.com/jupyter-notebooks-are-breathtakingly-featureless-use-jupyter-lab-be858a67b59d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Other</a>\n<a href=\"https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">posts</a>\nhave covered in more detail why we should switch to using Jupyter Lab\ninstead, so I won’t talk about that here.</p>\n<p>Instead, I just want to share how to run Jupyter Lab efficiently on a remote\nmachine. I have a research cluster where I do most of my analyses for my PhD\nwork, and running Jupyter Lab directly on the cluster means I don’t have to\ncopy files between the cluster and my desktop.</p>\n<p>Before we begin, one thing to keep in mind about research clusters, i.e. High\nPerformance Computing (HPC) clusters, is the concept of a login node vs a\ncompute node. When you <code class=\"language-text\">ssh</code> into your cluster, you are immediately in a login\nnode, which is where you do all your main file editing and manipulation. These\nnodes usually don’t have the memory required for intense compute jobs, which is\nwhere the compute nodes come in. You typically submit jobs via job schedulers\nlike SLURM or PBS to those compute nodes.</p>\n<p>With that in mind, this post will be split into information for running Jupyter\nLab on 1) a login node, and 2) a compute node. You should ask your system\nadministrator which they would prefer.</p>\n<p><strong>Contents</strong>:</p>\n<ul>\n<li>\n<p><a href=\"#running-on-a-login-node\">Running on a login node</a></p>\n<ul>\n<li><a href=\"#commands\">Commands</a></li>\n<li><a href=\"#simplfying-the-remote-side\">Simplfying the remote side</a></li>\n<li><a href=\"#simplfying-the-local-side\">Simplfying the local side</a></li>\n<li><a href=\"#putting-it-all-together\">Putting it all together</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#running-on-a-compute-node\">Running on a compute node</a></p>\n<ul>\n<li><a href=\"#commands-1\">Commands</a></li>\n<li><a href=\"#simplfying-the-remote-side-1\">Simplfying the remote side</a></li>\n<li><a href=\"#simplfying-the-local-side-1\">Simplfying the local side</a></li>\n<li><a href=\"#putting-it-all-together-1\">Putting it all together</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"running-on-a-login-node\"><a href=\"#running-on-a-login-node\" aria-label=\"running on a login node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running on a login node</h1>\n<h2 id=\"commands\"><a href=\"#commands\" aria-label=\"commands permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commands</h2>\n<p>To run Jupyter Lab on a login node, you need to open 2 terminal windows.\nIn the first window:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">ssh</span> username@hostname\n$ jupyter lab --no-browser --port<span class=\"token operator\">=</span><span class=\"token number\">5678</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>I <span class=\"token number\">10</span>:17:14.160 LabApp<span class=\"token punctuation\">]</span> Use Control-C to stop this server and shut down all kernels <span class=\"token punctuation\">(</span>twice to skip confirmation<span class=\"token punctuation\">)</span>.\n<span class=\"token punctuation\">[</span>C <span class=\"token number\">10</span>:17:14.160 LabApp<span class=\"token punctuation\">]</span>\n\n    Copy/paste this URL into your browser when you connect <span class=\"token keyword\">for</span> the first time,\n    to login with a token:\n        http://localhost:5678/?token<span class=\"token operator\">=</span>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></pre></div>\n<p>Note that the default port for Jupyter is <code class=\"language-text\">5678</code>, but to be courteous to other\npotential users of this cluster, you should choose an arbitrary 4-digit number\n(I arbitrarily chose 5678 in this case) to leave <code class=\"language-text\">8888</code> available in case\nsomeone else is playing with Jupyter.</p>\n<p>Then in the second window:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">ssh</span> -CNL localhost:5678:localhost:5678 username@hostname</code></pre></div>\n<p>Then in your web browser of choice, navigate to</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">localhost:5678</code></pre></div>\n<p>in the url bar. A login screen will show up asking for a token. Scroll down and\nyou’ll see an option to set up a password:</p>\n<p><img src=\"/media/jupyter-setup-password.png\" alt=\"Jupyter Password Setup\"></p>\n<p>Enter the token (i.e. <code class=\"language-text\">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code> from\nabove) and your desired password, and from now on you can just use your password\nto login.</p>\n<p>All that is kind of a lot just to open up Jupyter Lab. So I found ways to\nsignificantly simplify the process from both the remote and local side.</p>\n<h2 id=\"simplfying-the-remote-side\"><a href=\"#simplfying-the-remote-side\" aria-label=\"simplfying the remote side permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simplfying the remote side</h2>\n<p>To make things easier on the remote machine side of things, <code class=\"language-text\">tmux</code> (or\n<code class=\"language-text\">screen</code>) and bash aliases and functions really come in handy. I like to have a\nJupyter Lab session running constantly in my remote machine whether I’m logged\nin or not. Then I can ssh tunnel in to the existing session whenever I want! To\ndo this, I do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">ssh</span> username@hostname\n$ tmux\n<span class=\"token punctuation\">[</span> opens persistent shell session <span class=\"token punctuation\">]</span>\n$ jlremote\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>I <span class=\"token number\">10</span>:17:14.160 LabApp<span class=\"token punctuation\">]</span> Use Control-C to stop this server and shut down all kernels <span class=\"token punctuation\">(</span>twice to skip confirmation<span class=\"token punctuation\">)</span>.\n<span class=\"token punctuation\">[</span>C <span class=\"token number\">10</span>:17:14.160 LabApp<span class=\"token punctuation\">]</span>\n\n    Copy/paste this URL into your browser when you connect <span class=\"token keyword\">for</span> the first time,\n    to login with a token:\n        http://localhost:8888/?token<span class=\"token operator\">=</span>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></pre></div>\n<p>I have <code class=\"language-text\">jlremote</code> defined as an alias in my remote <code class=\"language-text\">~/.bashrc</code> file like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">jlremote</span><span class=\"token operator\">=</span><span class=\"token string\">'jupyter lab --no-browser --port=5678'</span></code></pre></div>\n<p>So once I have that Jupyter Lab session running, I can detach from the tmux\nsession with <code class=\"language-text\">CTRL-b, d</code> (or <code class=\"language-text\">CTRL-a, CTRL-d</code> if you used the <code class=\"language-text\">screen</code>\ncommand), and let that process run indefinitely (days, weeks, months…).</p>\n<p>Now let’s deal with the local stuff.</p>\n<h2 id=\"simplfying-the-local-side\"><a href=\"#simplfying-the-local-side\" aria-label=\"simplfying the local side permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simplfying the local side</h2>\n<p>On the local side, I wanted to be able to run a single command like\n<code class=\"language-text\">jllocal</code> to open Jupyter Lab, so I wrote a bash function that goes in my\nlocal <code class=\"language-text\">~/.bashrc</code> file. If you use this make sure to edit all the all-caps\nstuff, like <code class=\"language-text\">USERNAME</code> and <code class=\"language-text\">HOSTNAME</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">jllocal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token assign-left variable\">port</span><span class=\"token operator\">=</span><span class=\"token number\">5678</span> \n  <span class=\"token assign-left variable\">remote_username</span><span class=\"token operator\">=</span>USERNAME\n  <span class=\"token assign-left variable\">remote_hostname</span><span class=\"token operator\">=</span><span class=\"token environment constant\">HOSTNAME</span>\n  <span class=\"token assign-left variable\">url</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://localhost:<span class=\"token variable\">$port</span>\"</span> \n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Opening <span class=\"token variable\">$url</span>\"</span>\n  <span class=\"token function\">open</span> <span class=\"token string\">\"<span class=\"token variable\">$url</span>\"</span>\n  <span class=\"token assign-left variable\">cmd</span><span class=\"token operator\">=</span><span class=\"token string\">\"ssh -CNL localhost:\"</span><span class=\"token variable\">$port</span><span class=\"token string\">\":localhost:\"</span><span class=\"token variable\">$port</span><span class=\"token string\">\" <span class=\"token variable\">$remote_username</span>@<span class=\"token variable\">$remote_hostname</span>\"</span> \n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Running '<span class=\"token variable\">$cmd</span>'\"</span>\n  <span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\">$cmd</span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This function does a few things when you type <code class=\"language-text\">jllocal</code>:</p>\n<ol>\n<li>Runs ssh tunneling command if it’s not already running</li>\n<li>Grabs the Jupyter token from the remote machine</li>\n<li>Opens a tab in your browser with the right url and token for you</li>\n</ol>\n<p>When you’re done accessing your Jupyter Lab session, type <code class=\"language-text\">CTRL-C</code> and it will\nshut down the ssh tunnel.</p>\n<h2 id=\"putting-it-all-together\"><a href=\"#putting-it-all-together\" aria-label=\"putting it all together permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Putting it all together</h2>\n<p>So with an alias in place in your remote <code class=\"language-text\">~/.bashrc</code>, a persistent\nremote tmux/screen session running Jupyter Lab, and a function defined in\nyour local <code class=\"language-text\">~/.bashrc</code>, all you need to do to open Jupyter Lab in your\nbrowser is a <code class=\"language-text\">jllocal</code> call on your local machine, and then <code class=\"language-text\">CTRL-C</code>\nwhen you’re done. It takes some initial set up work, but the simplicity in\nthe end is worth it.</p>\n<h1 id=\"running-on-a-compute-node\"><a href=\"#running-on-a-compute-node\" aria-label=\"running on a compute node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running on a compute node</h1>\n<p>Now let’s do the same thing, but for those of you who need to run Jupyter lab on\na compute node instead of a login node. There’s a little bit more setup to think\nabout, but in the end, <code class=\"language-text\">jllocal</code> should be all you need to type to access your\nJupyter Lab session, just like on a login node.</p>\n<h2 id=\"commands-1\"><a href=\"#commands-1\" aria-label=\"commands 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commands</h2>\n<p>To run Jupyter Lab on a compute node, you once again need to open 2 terminal\nwindows. In the first window:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">ssh</span> username@hostname\n$ srun --mem<span class=\"token operator\">=</span>2G --pty <span class=\"token function\">bash</span>\n$ <span class=\"token function\">hostname</span>\ncomputehostname\n$ jupyter lab --no-browser --port<span class=\"token operator\">=</span><span class=\"token number\">5678</span> --ip<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">hostname</span><span class=\"token variable\">)</span></span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>I <span class=\"token number\">10</span>:17:14.160 LabApp<span class=\"token punctuation\">]</span> Use Control-C to stop this server and shut down all kernels <span class=\"token punctuation\">(</span>twice to skip confirmation<span class=\"token punctuation\">)</span>.\n<span class=\"token punctuation\">[</span>C <span class=\"token number\">10</span>:17:14.160 LabApp<span class=\"token punctuation\">]</span>\n\n    Copy/paste this URL into your browser when you connect <span class=\"token keyword\">for</span> the first time,\n    to login with a token:\n        http://computehostname:5678/?token<span class=\"token operator\">=</span>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></pre></div>\n<p>If that gives you any errors, especially one that says <code class=\"language-text\">KeyError: &#39;runtime_dir&#39;</code>\nin it, try replacing the <code class=\"language-text\">jupyter</code> line with</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_RUNTIME_DIR</span></span><span class=\"token operator\">=</span> jupyter lab --no-browser --port<span class=\"token operator\">=</span><span class=\"token number\">5678</span> --ip<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">hostname</span><span class=\"token variable\">)</span></span></code></pre></div>\n<p>For me, the <code class=\"language-text\">XDG_RUNTIME_DIR</code> environmental variable caused some problems, and\nsetting it to a blank value fixed it.</p>\n<p>Note that the default port for Jupyter is <code class=\"language-text\">5678</code>, but to be courteous to other\npotential users of this cluster, you should choose an arbitrary 4-digit number\n(I arbitrarily chose 5678 in this case) to leave <code class=\"language-text\">8888</code> available in case\nsomeone else is playing with Jupyter. Also, <code class=\"language-text\">computehostname</code> is whatever the\nnode spits out when you type <code class=\"language-text\">hostname</code>. It could look something like <code class=\"language-text\">node07</code>.</p>\n<p>Then in the second window:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">ssh</span> -CNL <span class=\"token number\">5678</span>:computehostname:5678 username@hostname</code></pre></div>\n<p>Where, once again, <code class=\"language-text\">computehostname</code> is the <code class=\"language-text\">hostname</code> of whatever compute node\nyou got assigned when you ran your interactive compute job with the <code class=\"language-text\">srun</code>\ncommand above.</p>\n<p>Then in your web browser of choice, navigate to</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">localhost:5678</code></pre></div>\n<p>in the url bar. If you haven’t already set a password, a login screen will show up asking for a token. Scroll down and you’ll see an option to set up a password:</p>\n<p><img src=\"/media/jupyter-setup-password.png\" alt=\"Jupyter Password Setup\"></p>\n<p>Enter the token (i.e. <code class=\"language-text\">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code> from\nabove) and your desired password, and from now on you can just use your password\nto login.</p>\n<p>Once again, just like with running on the login node, these steps can be\nsimplified. </p>\n<h2 id=\"simplfying-the-remote-side-1\"><a href=\"#simplfying-the-remote-side-1\" aria-label=\"simplfying the remote side 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simplfying the remote side</h2>\n<p>Having a forever Jupyter session on a compute node might not be an option for\nevery cluster, but if it is, <code class=\"language-text\">tmux</code> or <code class=\"language-text\">screen</code>, plus bash aliases and functions\nonce again come in handy. You can run an interactive compute job within a <code class=\"language-text\">tmux</code>\nsession, then activate your Jupyter Lab session from within the interactive\ncompute job, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">ssh</span> username@hostname\n$ tmux\n<span class=\"token punctuation\">[</span> opens persistent shell session <span class=\"token punctuation\">]</span>\n$ srun --mem<span class=\"token operator\">=</span>2G --pty <span class=\"token function\">bash</span>\n$ jlremote\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>I <span class=\"token number\">10</span>:17:14.160 LabApp<span class=\"token punctuation\">]</span> Use Control-C to stop this server and shut down all kernels <span class=\"token punctuation\">(</span>twice to skip confirmation<span class=\"token punctuation\">)</span>.\n<span class=\"token punctuation\">[</span>C <span class=\"token number\">10</span>:17:14.160 LabApp<span class=\"token punctuation\">]</span>\n\n    Copy/paste this URL into your browser when you connect <span class=\"token keyword\">for</span> the first time,\n    to login with a token:\n        http://localhost:8888/?token<span class=\"token operator\">=</span>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></pre></div>\n<p>For this case, I have <code class=\"language-text\">jlremote</code> defined a little differently than for running\non the login node. Before, it was an alias. Now, it’s a function (still in my\nremote <code class=\"language-text\">~/.bashrc</code>) that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">jlremote</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">hostname</span><span class=\"token variable\">)</span></span> <span class=\"token operator\">></span> ~/.jupyternode.txt\n\t<span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_RUNTIME_DIR</span></span><span class=\"token operator\">=</span> jupyter lab --no-browser --port<span class=\"token operator\">=</span><span class=\"token number\">9753</span> --ip<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">hostname</span><span class=\"token variable\">)</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The main difference from before is that we’re creating a file with an arbitrary\nname that contains the compute node’s hostname. This will be used by the local\nmachine to properly set up the ssh tunnel.</p>\n<p>So once I have that Jupyter Lab session running, I can detach from the tmux\nsession with <code class=\"language-text\">CTRL-b, d</code> (or <code class=\"language-text\">CTRL-a, CTRL-d</code> if you used the <code class=\"language-text\">screen</code>\ncommand), and let that process run indefinitely (days, weeks, months…), if\nyour compute node allows it.</p>\n<p>Now let’s deal with the local stuff.</p>\n<h2 id=\"simplfying-the-local-side-1\"><a href=\"#simplfying-the-local-side-1\" aria-label=\"simplfying the local side 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simplfying the local side</h2>\n<p>On the local side, the <code class=\"language-text\">jllocal</code> bash function also has a few changes compared\nto the <code class=\"language-text\">jllocal</code> function for login node Jupyter sessions. The new function,\nwhich is still in my local <code class=\"language-text\">~/.bashrc</code> file, looks like this, but with\n<code class=\"language-text\">USERNAME</code> and <code class=\"language-text\">HOSTNAME</code> changed to the proper values:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">jllocal</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token assign-left variable\">port</span><span class=\"token operator\">=</span><span class=\"token number\">5678</span>\n  <span class=\"token assign-left variable\">remote_username</span><span class=\"token operator\">=</span>USERNAME\n  <span class=\"token assign-left variable\">remote_hostname</span><span class=\"token operator\">=</span><span class=\"token environment constant\">HOSTNAME</span>\n\t<span class=\"token assign-left variable\">node</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ssh</span> lindsb@rrlogin.seas.upenn.edu <span class=\"token string\">'tail -1 ~/.jupyternode.txt'</span><span class=\"token variable\">)</span></span>\n\t<span class=\"token assign-left variable\">url</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://localhost:<span class=\"token variable\">$port</span>\"</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Opening <span class=\"token variable\">$url</span>\"</span>\n\t<span class=\"token function\">open</span> <span class=\"token string\">\"<span class=\"token variable\">$url</span>\"</span>\n\t<span class=\"token assign-left variable\">cmd</span><span class=\"token operator\">=</span><span class=\"token string\">\"ssh -CNL \"</span><span class=\"token variable\">$port</span><span class=\"token string\">\":\"</span><span class=\"token variable\">$node</span><span class=\"token string\">\":\"</span><span class=\"token variable\">$port</span><span class=\"token string\">\" <span class=\"token variable\">$remote_username</span>@<span class=\"token variable\">$remote_hostname</span>\"</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Running '<span class=\"token variable\">$cmd</span>'\"</span>\n\t<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\">$cmd</span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The main difference between this and the login node version of <code class=\"language-text\">jllocal</code> is that\nwe grab the compute node hostname from the remote <code class=\"language-text\">~/.jupyternode.txt</code> file we\ncreated, then use that in the ssh tunnel. Otherwise, it does all the same\nthings. When you’re done accessing your Jupyter Lab session, type <code class=\"language-text\">CTRL-C</code> and it will\nshut down the ssh tunnel.</p>\n<h2 id=\"putting-it-all-together-1\"><a href=\"#putting-it-all-together-1\" aria-label=\"putting it all together 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Putting it all together</h2>\n<p>Just like with the login node setup, with a function in place in your remote\n<code class=\"language-text\">~/.bashrc</code>, a persistent remote tmux/screen session running Jupyter Lab, and a\nfunction defined in your local <code class=\"language-text\">~/.bashrc</code>, ideally a single <code class=\"language-text\">jllocal</code> call on\nyour local machine will open your browser and connect you to your session, then\n<code class=\"language-text\">CTRL-C</code> when you’re done. Hopefully all this helps someone out there, and feel\nfree to ask questions below if you get stuck.</p>","fields":{"slug":"/posts/running-jupyter-lab-remotely","tagSlugs":["/tag/bash/","/tag/jupyter/","/tag/tmux/","/tag/ssh/","/tag/productivity/"]},"frontmatter":{"date":"2018-04-30","description":"I'm a huge fan of Jupyter Notebooks, and I was very excited when I found out about Jupyter Lab, which provides a much more comprehensive user experience around Jupyter Notebooks. Here I share how to run Jupyter Lab efficiently on a remote machine. I have a research cluster where I do most of my analyses for my PhD work, and running Jupyter Lab directly on the cluster means I don't have to copy files between the cluster and my desktop.","tags":["bash","jupyter","tmux","ssh","productivity"],"title":"Running Jupyter Lab Remotely"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/running-jupyter-lab-remotely"}}}