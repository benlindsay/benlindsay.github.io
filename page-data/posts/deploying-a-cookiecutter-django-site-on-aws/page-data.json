{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/deploying-a-cookiecutter-django-site-on-aws","webpackCompilationHash":"4b080084c1839d919188","result":{"data":{"markdownRemark":{"id":"c3948d48-6351-53e6-be43-80235a1a5dd7","html":"<p>The <a href=\"https://cookiecutter-django.readthedocs.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django Cookiecutter template</a>\nis an amazing tool to start up a Django project with all the bells and whistles\nready to go. Getting your production site up and running can still be a bit of a\nhassle though, so to save myself, and hopefully a few others, from this hassle\nin the future, I’m recording all the steps that worked for me here. I’m sure\nthere are other ways of doing this, and I’d love feedback on how to\nsimplify the process.</p>\n<h2 id=\"quick-note\"><a href=\"#quick-note\" aria-label=\"quick note permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quick Note</h2>\n<p>Following these steps may incur some small charges on AWS even if\nyou think you’re on the “Free Tier”. Keep an eye on your billing dashboard and\nterminate all EC2 instances and delete Elastic IPs once you’re done with them.\nFor reference though, my billing forecast shows $1.38 for the month of July\nafter tons of messing around on AWS. If you have some AWS Educate credits, or\nsome of your credits from starting an account left over, you should be\nfine though. Also you can <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">set up billing\nalerts</a>\nto make sure you don’t get caught off-guard. </p>\n<h2 id=\"what-youll-get-out-of-this\"><a href=\"#what-youll-get-out-of-this\" aria-label=\"what youll get out of this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What you’ll get out of this</h2>\n<p>If you follow all these steps closely, by the end you will have an HTTPS enabled\nsite with a custom domain name running via Docker on AWS EC2, backed by\nPostgreSQL, Redis, and Traefik. You’ll be able to create simple user profiles\nwith email confirmations (with some caveats). And best of all, you won’t have\nspent a dime. This is all it will look like, but it’ll be ready for you to put\nit straight into production once you customize it.</p>\n<p><img src=\"/media/django-cookiecutter-screenshot.png\" alt=\"Django Cookicutter Screenshot\"></p>\n<h2 id=\"1-initialize-ec2-instance\"><a href=\"#1-initialize-ec2-instance\" aria-label=\"1 initialize ec2 instance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Initialize EC2 Instance</h2>\n<p>Log in to your <a href=\"https://console.aws.amazon.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS Console</a> (sign up for the\nFree Tier if you don’t have an account already). Click EC2 under services, and\nselect your desired region from the menu near the top right of the page. I chose\nUS East (Ohio) because that’s closest to my current location.</p>\n<p><img src=\"/media/aws-ec2-region-selection.png\" alt=\"Region Selection Screenshot\"></p>\n<p>Click on Running Instances, then Launch Instance. This gives you a list of\nimages you can pick from. I used the second one because it says it includes\nPython and Docker. Other images would probably work too.</p>\n<p><img src=\"/media/aws-ami-selection.png\" alt=\"AWS AMI Selection Screenshot\"></p>\n<p>In the launch wizard, the only thing you need to modify is the Security Group.\nClick on “6. Configure Security Group” at near the top of the screen, then click\n“Add Rule” to add HTTP, then do it again to add HTTPS. This is necessary to make\nyour instance accessible as an HTTPS-enabled website.</p>\n<p><img src=\"/media/aws-security-group-configuration.png\" alt=\"AWS EC2 Security Group\nConfiguration\"></p>\n<p>With that, you’re set to launch. When you click launch, you’ll see a screen\nasking you to select or create a key pair. I’ll create a new one called\n“test-aws” and hit “Download Key Pair”. A good place to store the <code class=\"language-text\">test-aws.pem</code>\nfile is in your <code class=\"language-text\">~/.ssh/</code> folder. Whatever you do, <strong>do not version control this\nfile</strong>. You don’t want to accidentally push your private key to Github.</p>\n<p><img src=\"/media/aws-create-key-pair.png\" alt=\"AWS Create Key Pair\"></p>\n<p>After downloading your key pair, make sure it has the correct permissions by\nrunning</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> ~/.ssh/test-aws.pem</code></pre></div>\n<p>Make sure to use the path that points to your <code class=\"language-text\">.pem</code> file if you named it\ndifferently or stored it somewhere else.\nNow you can finally launch your EC2 instance with\nthe “Launch Instances” button. Now you can go back to your EC2 Dashboard, click\non “Running Instances” and see your freshly launched EC2 instance.</p>\n<h2 id=\"2-get-an-elastic-ip-address\"><a href=\"#2-get-an-elastic-ip-address\" aria-label=\"2 get an elastic ip address permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Get an Elastic IP Address</h2>\n<p>Your EC2 Dashboard shows you a lot of info about your EC2 instance, including\nyour IPv4 Public IP. This address could change during the lifetime of your EC2\ninstance though, so you need to assign it an Elastic IP, which will remain\nattached to your instance as long as you want. To do this, select the Elastic IP\nservice in your AWS Console and click “Allocate new address”.</p>\n<p><img src=\"/media/aws-allocate-elastic-ip-address.png\" alt=\"AWS Allocate Elastic IP\"></p>\n<p>You don’t have to change anything from the defaults. Going through that short\nwizard will give you a new Elastic IP address. In my case, it’s <code class=\"language-text\">3.19.20.222</code>.\nNow that you have this IP Address, go to your Elastic IP Dashboard, select the\nnew Elastic IP, click “Actions”, then “Associate address” to associate it with\nyour running instance.</p>\n<p><img src=\"/media/aws-associate-elastic-ip.png\" alt=\"AWS Associate Elastic IP\"></p>\n<p>In the next screen, choose select your instance then click “Associate”.</p>\n<p><img src=\"/media/aws-select-instance-to-associate-elastic-ip.png\" alt=\"AWS Select Instance to Associate Elastic\nIP\"></p>\n<h2 id=\"3-add-iam-role-to-ec2-instance\"><a href=\"#3-add-iam-role-to-ec2-instance\" aria-label=\"3 add iam role to ec2 instance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Add IAM Role to EC2 Instance</h2>\n<p>The last modification you have to do to your EC2 instance is to add an IAM role\nto it to allow it to access S3 storage, which is where the static files will be\nstored. First, we need to create the IAM role. Go to the IAM service in your AWS\nConsole (search “IAM” in the search box). You’ll see something that looks like\nthis with a few default IAM roles already available. We’ll make a new one that\nonly has an S3 Access policy, so click “Create role”.</p>\n<p><img src=\"/media/aws-iam-dashboard.png\" alt=\"AWS IAM Dashboad\"></p>\n<p>Choose the EC2 service, then click “Next: Permissions”.</p>\n<p><img src=\"/media/aws-create-role-page-1.png\" alt=\"AWS Create IAM Role Page 1\"></p>\n<p>Scroll down to the <code class=\"language-text\">AmazonS3FullAccess</code> policy, select that, then click “Next:\nTags”.</p>\n<p><img src=\"/media/aws-create-role-page-2.png\" alt=\"AWS Create IAM Role Page 2\"></p>\n<p>Skip to the next page, enter a name for this Role (I called it “S3Access”), and\nclick “Create role”.</p>\n<p><img src=\"/media/aws-create-role-page-4.png\" alt=\"AWS Create IAM Role Page 4\"></p>\n<p>Now we need to attach this role to our EC2 instance. Go to the Running Instances\nsection of your EC2 Dashboard. Select your instance, then click “Actions >\nInstance Settings > Attach/Replace IAM Role”.</p>\n<p><img src=\"/media/aws-attach-iam-role.png\" alt=\"AWS Attach IAM Role\"></p>\n<p>Select your <code class=\"language-text\">S3Access</code> IAM role and attach it.</p>\n<h2 id=\"4-create-s3-bucket\"><a href=\"#4-create-s3-bucket\" aria-label=\"4 create s3 bucket permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Create S3 Bucket</h2>\n<p>Now that our EC2 instance is all set up, we need to create an S3 bucket to store\nstatic files in. Go to the S3 service in your AWS Console and click “Create\nbucket”. In the wizard that pops up, make sure the Region is the same as your\nEC2 instance and pick a name for your bucket, then click “Next”.</p>\n<p><img src=\"/media/aws-create-s3-bucket-page-1.png\" alt=\"AWS Create S3 Bucket Page 1\"></p>\n<p>You can stick with the default options in page 2 and click Next. On the “Set\nPermissions” page, you’ll need to uncheck all the boxes so it is publicly\naccessible.</p>\n<p><img src=\"/media/aws-create-s3-bucket-page-3.png\" alt=\"AWS Create S3 Bucket Page 3\"></p>\n<p>Click “Next”, then create the bucket.</p>\n<h2 id=\"5-get-a-domain-name\"><a href=\"#5-get-a-domain-name\" aria-label=\"5 get a domain name permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Get a Domain Name</h2>\n<p>To enable HTTPS using <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Let’s Encrypt</a> (the default\ncertificate authority in the Django Cookiecutter template), you’ll need a domain\nname. You can get a domain name for free (!) from\n<a href=\"https://www.freenom.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">freenom.com</a>. I got <a href=\"https://testaws.ga\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">testaws.ga</a>.\nWhether you use Freenom or some other service, you need to create A records\nthat associate the Elastic IP we reserved for our EC2 instance with this domain\nname. It should look something like this, where the “Target” for both records is\nour Elastic IP:</p>\n<p><img src=\"/media/freenom-dns-management.png\" alt=\"Freenom DNS Management\"></p>\n<p>Be aware that it might take a day or two for your IP address change to actually\ngo through so that your domain name actually points to the right place.</p>\n<h2 id=\"6-initialize-django-project-with-cookiecutter\"><a href=\"#6-initialize-django-project-with-cookiecutter\" aria-label=\"6 initialize django project with cookiecutter permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Initialize Django Project with Cookiecutter</h2>\n<p>OK, that was a lot of clicking through wizards so pat yourself on the back,\nstand up and stretch, maybe grab a coffee. Now we’re finally ready to start\ngetting to Django. If you don’t already have <code class=\"language-text\">cookiecutter</code> installed (you can\ncheck with <code class=\"language-text\">which cookiecutter</code>), you can install it with</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> cookiecutter</code></pre></div>\n<p>Once that’s installed, you can initialize your Django project with</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">cookiecutter https://github.com/pydanny/cookiecutter-django</code></pre></div>\n<p>This asks a bunch of questions. Here’s how I answered them:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">You&#39;ve downloaded /Users/benlindsay/.cookiecutters/cookiecutter-django before. Is it okay to delete and re-download it? [yes]:\nproject_name [My Awesome Project]: Test Django On AWS\nproject_slug [test_django_on_aws]:\ndescription [Behold My Awesome Project!]: Deploying Django on AWS for Free\nauthor_name [Daniel Roy Greenfeld]: Ben Lindsay\ndomain_name [example.com]: testaws.ga\nemail [ben-lindsay@example.com]: benjlindsay@gmail.com\nversion [0.1.0]:\nSelect open_source_license:\n1 - MIT\n2 - BSD\n3 - GPLv3\n4 - Apache Software License 2.0\n5 - Not open source\nChoose from 1, 2, 3, 4, 5 (1, 2, 3, 4, 5) [1]:\ntimezone [UTC]: America/Chicago\nwindows [n]:\nuse_pycharm [n]:\nuse_docker [n]: y\nSelect postgresql_version:\n1 - 11.3\n2 - 10.8\n3 - 9.6\n4 - 9.5\n5 - 9.4\nChoose from 1, 2, 3, 4, 5 (1, 2, 3, 4, 5) [1]:\nSelect js_task_runner:\n1 - None\n2 - Gulp\nChoose from 1, 2 (1, 2) [1]:\nSelect cloud_provider:\n1 - AWS\n2 - GCP\n3 - None\nChoose from 1, 2, 3 (1, 2, 3) [1]:\ncustom_bootstrap_compilation [n]:\nuse_compressor [n]:\nuse_celery [n]:\nuse_mailhog [n]:\nuse_sentry [n]:\nuse_whitenoise [n]:\nuse_heroku [n]:\nuse_travisci [n]:\nkeep_local_envs_in_vcs [y]:\ndebug [n]:\n [SUCCESS]: Project initialized, keep up the good work!</code></pre></div>\n<p>The only options that really matter for our purposes are putting the correct\ndomain name (<code class=\"language-text\">testaws.ga</code> in my case), choosing AWS as the cloud provider, and\nsaying yes to <code class=\"language-text\">use_docker</code>. This makes a new folder called <code class=\"language-text\">test_django_on_aws</code>\nin my case with all the project files in it. Before doing anything else, let’s\nput our project in version control. The default <code class=\"language-text\">.gitignore</code> keeps production\nenvironment files out of version control, but always make sure you haven’t\ncommitted any secrets before pushing to Github.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> test_django_on_aws\n<span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> cm -m <span class=\"token string\">\"files as generated by cookiecutter\"</span></code></pre></div>\n<p>If you have Docker and Docker Compose installed on your computer, you can\ntest your Django project by running it locally. You don’t need Docker\ninstalled to deploy to AWS though. To run it locally, make sure you’re in the\nbase project folder and run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker-compose -f local.yml build\ndocker-compose -f local.yml up</code></pre></div>\n<p>The <code class=\"language-text\">build</code> command will take a long time the first time you run it so be\npatient. After running the <code class=\"language-text\">up</code> command, navigate to <code class=\"language-text\">localhost:8000</code> in your\nbrowser, and you should see something like this, with a <a href=\"https://django-debug-toolbar.readthedocs.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django Debug\nToolbar</a> on the right.</p>\n<p><img src=\"/media/django-cookiecutter-local.png\" alt=\"Django Cookiecutter Local\"></p>\n<h2 id=\"7-modify-production-environment-variables\"><a href=\"#7-modify-production-environment-variables\" aria-label=\"7 modify production environment variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Modify Production Environment Variables</h2>\n<p>Before deploying to AWS, there are a couple production environment variables to\nadd in. If you open up <code class=\"language-text\">.envs/.production/.django</code>, you’ll see a file with these\nlines in it:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Email</span>\n<span class=\"token comment\"># ------------------------------------------------------------------------------</span>\n<span class=\"token assign-left variable\">MAILGUN_API_KEY</span><span class=\"token operator\">=</span>\n<span class=\"token assign-left variable\">DJANGO_SERVER_EMAIL</span><span class=\"token operator\">=</span>\n<span class=\"token assign-left variable\">MAILGUN_DOMAIN</span><span class=\"token operator\">=</span>\n\n<span class=\"token comment\"># AWS</span>\n<span class=\"token comment\"># ------------------------------------------------------------------------------</span>\n<span class=\"token assign-left variable\">DJANGO_AWS_ACCESS_KEY_ID</span><span class=\"token operator\">=</span>\n<span class=\"token assign-left variable\">DJANGO_AWS_SECRET_ACCESS_KEY</span><span class=\"token operator\">=</span>\n<span class=\"token assign-left variable\">DJANGO_AWS_STORAGE_BUCKET_NAME</span><span class=\"token operator\">=</span></code></pre></div>\n<p>At a minimum, you need to add the S3 bucket name to\n<code class=\"language-text\">DJANGO_AWS_STORAGE_BUCKET_NAME</code>. If you want to be able to have users create\naccounts on the site, you’ll need to add a <code class=\"language-text\">MAILGUN_API_KEY</code> and\n<code class=\"language-text\">MAILGUN_DOMAIN</code> as well. If you sign up for a free account at\n<a href=\"https://mailgun.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mailgun.com</a>, you can follow the instructions\n<a href=\"https://help.mailgun.com/hc/en-us/articles/203380100-Where-Can-I-Find-My-API-Key-and-SMTP-Credentials-\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>\nto get your API key. My variables now look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Email</span>\n<span class=\"token comment\"># ------------------------------------------------------------------------------</span>\n<span class=\"token assign-left variable\">MAILGUN_API_KEY</span><span class=\"token operator\">=</span>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-XXXXXXXX-XXXXXXXX\n<span class=\"token assign-left variable\">DJANGO_SERVER_EMAIL</span><span class=\"token operator\">=</span>\n<span class=\"token assign-left variable\">MAILGUN_DOMAIN</span><span class=\"token operator\">=</span>sandboxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.mailgun.org\n\n<span class=\"token comment\"># AWS</span>\n<span class=\"token comment\"># ------------------------------------------------------------------------------</span>\n<span class=\"token assign-left variable\">DJANGO_AWS_ACCESS_KEY_ID</span><span class=\"token operator\">=</span>\n<span class=\"token assign-left variable\">DJANGO_AWS_SECRET_ACCESS_KEY</span><span class=\"token operator\">=</span>\n<span class=\"token assign-left variable\">DJANGO_AWS_STORAGE_BUCKET_NAME</span><span class=\"token operator\">=</span>test-aws-django-static</code></pre></div>\n<h2 id=\"8-install-and-start-docker-on-ec2-instance\"><a href=\"#8-install-and-start-docker-on-ec2-instance\" aria-label=\"8 install and start docker on ec2 instance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. Install and Start Docker on EC2 Instance</h2>\n<p>OK, time to actually start doing stuff on the EC2 instance. To <code class=\"language-text\">ssh</code> in, we need\nthe hostname, which you can get from the Running Instances dashboard within the\nEC2 service. It should look something like\n<code class=\"language-text\">ec2-WWW-XXX-YYY-ZZZ.us-east-2.compute.amazonaws.com</code>, where <code class=\"language-text\">WWW.XXX.YYY.ZZZ</code>\nwould be your public IP. To ssh into my instance, I run</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">ssh</span> -i ~/.ssh/test-aws.pem ec2-user@ec2-3-19-20-222.us-east-2.compute.amazonaws.com</code></pre></div>\n<p>Note: Your username is literally <code class=\"language-text\">ec2-user</code>, not something specific to you. It’s\nthe same for everyone. Once you’re in, run a couple update/install commands: </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> yum update -y\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y docker\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> docker start\n<span class=\"token function\">sudo</span> pip <span class=\"token function\">install</span> docker-compose</code></pre></div>\n<p>This next one is a nice convenience command to make it so we don’t have to type\n<code class=\"language-text\">sudo</code> in front of all our <code class=\"language-text\">docker</code> commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG docker ec2-user</code></pre></div>\n<p>Make sure it’s working by typing <code class=\"language-text\">docker ps</code> which should give you this output:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>ec2-user@ip-XXX-XXX-XXX-XXX ~<span class=\"token punctuation\">]</span>$ docker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</code></pre></div>\n<h2 id=\"9-copy-files-to-ec2-instance\"><a href=\"#9-copy-files-to-ec2-instance\" aria-label=\"9 copy files to ec2 instance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. Copy Files to EC2 Instance</h2>\n<p>Open a new terminal window, and make sure you’re in your project’s top-level\ndirectory, i.e.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> /path/to/test_django_on_aws</code></pre></div>\n<p>Then run this command with the right path to your <code class=\"language-text\">.pem</code> file and DNS:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">rsync</span> -av -e <span class=\"token string\">\"ssh -i /path/to/your.pem\"</span> <span class=\"token builtin class-name\">.</span> ec2-user@ec2-WWW-XXX-YYY-ZZZ.REGION.compute.amazonaws.com:~/app/</code></pre></div>\n<p>Now in your terminal that’s <code class=\"language-text\">ssh</code>‘ed into AWS, you should be able to</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> ~/app</code></pre></div>\n<p>and see all of your files copied there.</p>\n<h2 id=\"10-build-and-deploy\"><a href=\"#10-build-and-deploy\" aria-label=\"10 build and deploy permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10. Build and Deploy</h2>\n<p>Finally, it’s time. Within your <code class=\"language-text\">app</code> directory on your EC2 instance, run the\nfollowing two commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker-compose -f production.yml build\ndocker-compose -f production.yml up -d</code></pre></div>\n<p>The <code class=\"language-text\">build</code> command will take a while, but the <code class=\"language-text\">up</code> command will be pretty fast.\nNow if all goes well, you should be able to navigate to your domain name in a\nbrowser (<code class=\"language-text\">testaws.ga</code> in my case) and see a screen like the very first\nscreenshot in this blog post. If you don’t see it, keep calm and go to the next\nsection. If you do, congratulations! The universe smiles kindly on you. Go\npurchase a lottery ticket, then skip to section 12 and read on about accessing\nthe admin section and creating user profiles.</p>\n<h2 id=\"11-it-didnt-work-now-what\"><a href=\"#11-it-didnt-work-now-what\" aria-label=\"11 it didnt work now what permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11. It didn’t work. Now what?</h2>\n<p>There are so many moving parts that it’s pretty unlikely this will have worked\nperfectly the first time through. Getting to the point where I could write this\npost was a study in masochism, plowing through problem after problem until I\nfinally got the web page to render. I’ll go through some of the problems I ran\ninto and how I fixed them to give you some ideas about what to do next.</p>\n<ol>\n<li>\n<p><strong>The domain might need some time to point to the right IP address.</strong> It can\ntake up to a day or two. When Chrome couldn’t connect to the webpage, I\nopened a terminal and typed</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ping testaws.ga</code></pre></div>\n<p>which responded with</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PING testaws.ga (3.17.199.231): 56 data bytes\nRequest timeout for icmp_seq 0\nRequest timeout for icmp_seq 1</code></pre></div>\n<p>I had previously pointed <code class=\"language-text\">testaws.ga</code> at <code class=\"language-text\">3.17.199.231</code>, so I double-checked\nto make sure I had it pointed at my new Elastic IP, <code class=\"language-text\">3.19.20.222</code>\nand…waited. <code class=\"language-text\">ping</code> kept showing the old IP for about an hour, so I let it\nsit overnight, and in the morning it pointed to the right one. Don’t worry if\nyou get <code class=\"language-text\">Request timeout</code>s though. I get those and the site seems to be\nworking fine.</p>\n</li>\n<li>\n<p><strong>Check the logs.</strong> Once I got to the point of running the <code class=\"language-text\">docker-compose</code>\ncommands on the EC2 instance, checking the logs was crucial to debugging my\nproblems. That (plus a fancy new website called\n<a href=\"https://google.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google.com</a>) is how I found out that Let’s Encrypt\ndoesn’t work without a domain name, how I found out I needed to point to an\nS3 bucket. The way you check them is to run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker-compose -f production.yml logs</code></pre></div>\n<p>within the <code class=\"language-text\">app</code> directory of your EC2 instance. You’ll get a long printout\nof feedback from <code class=\"language-text\">traefik</code>, <code class=\"language-text\">django</code>, <code class=\"language-text\">postgres</code>, and <code class=\"language-text\">redis</code>. The main\nerrors I ran into were <code class=\"language-text\">traefik</code> saying something like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">unable to generate a certificate for the domains [mydomain.blah]</code></pre></div>\n<p>or a python stacktrace from <code class=\"language-text\">django</code> involving <code class=\"language-text\">boto3</code>, telling me there was\na problem with S3. If S3 is working, you should see a folder called <code class=\"language-text\">static</code>\nin your S3 bucket in the AWS Console.</p>\n</li>\n</ol>\n<h2 id=\"12-admin-dashboard\"><a href=\"#12-admin-dashboard\" aria-label=\"12 admin dashboard permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12. Admin Dashboard</h2>\n<p>The admin tool is a nice feature of Django, so let’s get that working. While\n<code class=\"language-text\">ssh</code>ed into your EC2 instance and in the <code class=\"language-text\">app</code> directory, first type</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker-compose -f production.yml run --rm django python manage.py migrate</code></pre></div>\n<p>to run migrations that will make the admin panel available, then create a\nsuperuser with</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker-compose -f production.yml run --rm django python manage.py createsuperuser</code></pre></div>\n<p>The Django Cookiecutter template is very security-conscious, so it generated a\nrandom string as the URL for your admin page. Go to <code class=\"language-text\">.envs/.production/.django</code>\nand find the line that looks like</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">DJANGO_ADMIN_URL</span><span class=\"token operator\">=</span>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/</code></pre></div>\n<p>Copy that string and navigate to\n<code class=\"language-text\">yourdomain.name/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/</code>, and it should give you a\nlogin screen. Log in with the username and password you just created, and you\nshould see this admin page:</p>\n<p><img src=\"/media/django-admin-page.png\" alt=\"Django Admin Page\"></p>\n<h2 id=\"13-create-user-profiles\"><a href=\"#13-create-user-profiles\" aria-label=\"13 create user profiles permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>13. Create User Profiles</h2>\n<p>Before we try making a user profile, note that the free version of Mailgun only\nlets you send emails to addresses you have specified in your account. So to test\nthis, you’ll need to go to\n<a href=\"https://app.mailgun.com/app/sending/domains\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">app.mailgun.com/app/sending/domains</a>\nand select your sandbox domain…</p>\n<p><img src=\"/media/mailgun-domains-page.png\" alt=\"Mailgun Domains Page\"></p>\n<p>…then add whatever emails you want to the list of authorized recipients.</p>\n<p><img src=\"/media/mailgun-authorized-recipients.png\" alt=\"Mailgun Authorized Recipients\"></p>\n<p>Mailgun will send a confirmation email to whatever addresses you list. Once you\nadd and confirm an address, you can test out user profile creation on your\nDjango site with that address. Django will send that a confirmation email to\nthat address. For me, that email showed up in Spam at first, so check there if\nyou don’t see it.</p>\n<h2 id=\"14-conclusion\"><a href=\"#14-conclusion\" aria-label=\"14 conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>14. Conclusion</h2>\n<p>I hope this post helps someone out there, especially future me. AWS can be a\npain in the @$$ so hopefully having some detailed steps will make it just a\nlittle less painful. Happy coding, and I’d love to hear any feedback below or on\nthe Twitters.</p>","fields":{"slug":"/posts/deploying-a-cookiecutter-django-site-on-aws","tagSlugs":["/tag/aws/","/tag/django/","/tag/docker/","/tag/python/"]},"frontmatter":{"date":"2019-07-23","description":"The Django Cookiecutter template is an amazing tool to start up a Django project with all the bells and whistles ready to go. Getting your production site up and running can still be a bit of a hassle though, so to save myself, and hopefully a few others, from this hassle in the future, I'm recording all the steps that worked for me here.","tags":["aws","django","docker","python"],"title":"Deploying a Cookiecutter Django Site on AWS"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/deploying-a-cookiecutter-django-site-on-aws"}}}