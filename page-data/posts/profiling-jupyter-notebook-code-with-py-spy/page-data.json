{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/profiling-jupyter-notebook-code-with-py-spy","webpackCompilationHash":"022b579d73eef85815c8","result":{"data":{"markdownRemark":{"id":"2161d7e7-25f5-5a74-82e8-6a18cf4ecf19","html":"<p>Jupyter notebooks are great for interactive development and visualization, but it’s hard to get nice code profiling visualizations.\nJake VanderPlas has <a href=\"https://jakevdp.github.io/PythonDataScienceHandbook/01.07-timing-and-profiling.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a great exceprt in his Python Data Science Handbook</a> with examples of how to time and profile code in a Jupyter notebook.\nThese work great, but the text output isn’t always as intuitive as visualizations like <a href=\"http://www.brendangregg.com/flamegraphs.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flame graphs</a>.\nThey give you a hierarchical view of which lines of code at all depths of the call stack are contributing the most to the compute time.\nNot only that, they’re <em>interactive</em> SVGs!\n<a href=\"http://www.brendangregg.com/FlameGraphs/cpu-mysql-updated.svg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Click on the image in the flame graphs link</a> and you can check out the interactivity yourself.\nYou can zoom into specific parts of the call stack and search for terms, and hover over blocks to see the full description at the top.\nAs far as I can tell, there are ways to get a line-by-line heat map in Jupyter, like <a href=\"https://stackoverflow.com/a/52461806\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a>, but you don’t get the full call stack like in a flame graph.</p>\n<p><img src=\"/media/flame-graph.png\" alt=\"Flame Graph Example\"></p>\n<p>There’s a fantastic package called <a href=\"https://github.com/benfred/py-spy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">py-spy</a> that creates flame graphs, but that works best with .py files.\nNow we just need a way to get our Jupyter notebook represented as a .py file.\nThere are a couple of options for this.\nOne would be to export the file as a .py file from the File menu of your Jupyter server.\nAnother option is to use <a href=\"https://github.com/mwouts/jupytext\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jupytext</a> to create a synced .py file.\nThe benefit of this is that if you make changes in the .py file, they’ll be reflected in the notebook, making it easier to switch between them.</p>\n<p>To do this, first install Jupytext with</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> jupytext</code></pre></div>\n<p>then, if you already have a notebook called <code class=\"language-text\">my_notebook.ipynb</code>, create a synced pair of files with</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ jupytext --set-formats ipynb,py:percent my_notebook.ipynb</code></pre></div>\n<p>which will create and sync <code class=\"language-text\">my_notebook.py</code>.\nGo <a href=\"https://jupytext.readthedocs.io/en/latest/using-cli.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> a quick reference of some CLI commands available to Jupytext.</p>\n<p>From there, you can run py-spy on the <code class=\"language-text\">my_notebook.py</code>.\nFirst, install py-spy if you haven’t already:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> py-spy</code></pre></div>\n<p>Then execute the script with py-spy and output a flame graph to <code class=\"language-text\">my_flame_graph.svg</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ py-spy record -o my_flame_graph.svg -- python my_notebook.py</code></pre></div>\n<p>Drag that SVG file onto a web browser and you can explore your flame graph interactively.</p>\n<h3 id=\"some-caveats\"><a href=\"#some-caveats\" aria-label=\"some caveats permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Some Caveats</h3>\n<p>If you have Jupyter magic commands (anything starting with <code class=\"language-text\">%</code>) or <code class=\"language-text\">display()</code> invocations, you’ll run into errors executing as a flat .py script.\nYou’ll need to comment out the Jupyter magics, and add a <code class=\"language-text\">from IPython.display import display</code> if you have <code class=\"language-text\">display()</code> anywhere.</p>\n<p>Please <a href=\"https://www.twitter.com/ben_j_lindsay\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hit me up on Twitter</a> or comment below if you found this useful, ran into issues with any of the steps in this post, or have suggestions about alternative ways to profile code in Jupyter notebooks.</p>","fields":{"slug":"/posts/profiling-jupyter-notebook-code-with-py-spy","tagSlugs":["/tag/jupyter/","/tag/py-spy/","/tag/performance/","/tag/python/"]},"frontmatter":{"date":"2021-05-14","description":"When you sync your Jupyter notebooks with Jupytext, you get to keep all the benefits of Jupyter notebooks while also being able to pass your code through a profiler like py-spy to get a rich, interactive visualization that helps you quickly understand where the bottlenecks are.","tags":["jupyter","py-spy","performance","python"],"title":"Profiling Jupyter Notebook Code with py-spy"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/profiling-jupyter-notebook-code-with-py-spy"}}}